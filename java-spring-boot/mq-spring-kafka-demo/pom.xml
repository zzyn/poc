<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.7.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.mq</groupId>
	<artifactId>spring-kafka-demo</artifactId>
	<version>1.0.0</version>
	<name>spring-kafka-demo</name>
	<description>Kids and Teen Master Data Kafka Daemon Service</description>

	<properties>
		<!-- encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- jdk -->
		<java.version>1.8</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<!-- docker -->
		<docker.image.prefix>${project.groupId}</docker.image.prefix>

		<spring-cloud.version>Greenwich.SR2</spring-cloud.version>
		<!-- testing -->
		<junit.version>4.12</junit.version>
		<mockito.version>2.22.0</mockito.version>
		<assertj.version>3.12.2</assertj.version>
		<!-- database -->
		<com.alibaba.druid.spring-boot-starter>1.1.18</com.alibaba.druid.spring-boot-starter>
		<org.mybatis.typehandlers.jsr310>1.0.2</org.mybatis.typehandlers.jsr310>
		<com.baomidou.mybatis.plus.spring.boot>3.1.0</com.baomidou.mybatis.plus.spring.boot>
		<mysql.connector.java>8.0.16</mysql.connector.java>
		<!-- json -->
		<com.fasterxml.jackson.core>2.9.6</com.fasterxml.jackson.core>
		<com.google.code.gson>2.8.5</com.google.code.gson>
		<!-- async logging -->
		<com.lmax>3.3.6</com.lmax>
		<!-- common lang -->
		<org.apache.commons.lang>3.8.1</org.apache.commons.lang>
		<commons.io.version>2.6</commons.io.version>
		<!-- plugins -->
		<com.spotify>1.0.0</com.spotify>
		<maven.surefire.plugin.version>2.19.1</maven.surefire.plugin.version>
		<maven.failsafe.plugin.version>2.22.2</maven.failsafe.plugin.version>
		<coverage.line.percent>10%</coverage.line.percent>
		<coverage.branch.percent>10%</coverage.branch.percent>
		<jacoco.version>0.8.4</jacoco.version>

		<sonar-maven-plugin.version>3.6.0.1398</sonar-maven-plugin.version>
        <docker.maven.plugin.version>0.33.0</docker.maven.plugin.version>

		<!-- test -->
		<test.reports.dir>target/test-reports</test.reports.dir>
		<test.exclusion.files>**/entities/**,**/dto/**,**/po/**,**/vo/**,**/core/**,**/entity/**,**/handler/**,**/mapper/**,**/service/**,**/config/**,**/contract/**,**/model/**</test.exclusion.files>

		<!-- jacoco -->
		<jacoco.outputDirectory>target/coverage-report</jacoco.outputDirectory>

		<!-- SonarQube -->
		<sonar.host.url>http://127.0.0.1</sonar.host.url>
		<sonar.login>#sonar.login.token#</sonar.login>
		<sonar.scm.disabled>true</sonar.scm.disabled>
		<sonar.language>java</sonar.language>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.coverage.jacoco.xmlReportPaths>${jacoco.outputDirectory}/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
		<sonar.exclusions>${test.exclusion.files}</sonar.exclusions>
		<sonar.coverage.exclusions>${test.exclusion.files}</sonar.coverage.exclusions>

	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>com.lmax</groupId>
				<artifactId>disruptor</artifactId>
				<version>${com.lmax}</version>
			</dependency>
			<!-- commons language -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${org.apache.commons.lang}</version>
			</dependency>
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons.io.version}</version>
			</dependency>
			<!-- database -->
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>${mysql.connector.java}</version>
			</dependency>
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid-spring-boot-starter</artifactId>
				<version>${com.alibaba.druid.spring-boot-starter}</version>
			</dependency>
			<dependency>
				<groupId>com.baomidou</groupId>
				<artifactId>mybatis-plus-boot-starter</artifactId>
				<version>${com.baomidou.mybatis.plus.spring.boot}</version>
			</dependency>
			<!-- json -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${com.fasterxml.jackson.core}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-annotations</artifactId>
				<version>${com.fasterxml.jackson.core}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${com.fasterxml.jackson.core}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.datatype</groupId>
				<artifactId>jackson-datatype-jsr310</artifactId>
				<version>${com.fasterxml.jackson.core}</version>
			</dependency>
			<dependency>
				<groupId>com.github.joschi.jackson</groupId>
				<artifactId>jackson-datatype-threetenbp</artifactId>
				<version>${com.github.joschi.jackson}</version>
			</dependency>
			<!-- test -->
			<dependency>
				<groupId>org.assertj</groupId>
				<artifactId>assertj-core</artifactId>
				<version>${assertj.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-core</artifactId>
				<version>${mockito.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.zaxxer</groupId>
					<artifactId>HikariCP</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

		<!-- Log4j2 Support -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>
		<!-- Log4j2 Async Support -->
		<dependency>
			<groupId>com.lmax</groupId>
			<artifactId>disruptor</artifactId>
		</dependency>
		<!-- database -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid-spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-boot-starter</artifactId>
		</dependency>
		<!-- apache commons -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>
		<!-- lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- json -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>

		<!-- cloud streams -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka</artifactId>
		</dependency>

		<!-- kafka -->
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<!-- unit test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-test-support</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- unit test -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.plugin.version}</version>
				<configuration>
					<reportsDirectory>${test.reports.dir}</reportsDirectory>
				</configuration>
			</plugin>
			<!-- integration test -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${maven.failsafe.plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<reportsDirectory>${test.reports.dir}</reportsDirectory>
                    <environmentVariables>
                        <!--
                            docker.host.address would be initialized by docker-maven-plugin
                            The value could be 127.0.0.1 or 192.168.xx.xx, depends on the local docker environment
                        -->
                        <dockerHost>${docker.host.address}</dockerHost>
                    </environmentVariables>
				</configuration>
			</plugin>
            <plugin>
                <!-- prepare database for integration test-->
                <!-- pre-integration-test: build image & start container-->
                <!-- post-integration-test: stop&remove container-->
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
				<version>${docker.maven.plugin.version}</version>
				
                <configuration>
                    <images>
                        <image>
                            <name>kt-master-data-database:${project.version}</name>
                            <alias>kt-master-data-database</alias>
                            <build>
                                <dockerFile>${project.basedir}/src/test/resources/mysql/Dockerfile</dockerFile>
                            </build>
                            <run>
                                <ports>
                                    <port>3306:3306</port>
                                </ports>
                                <wait>
                                    <log>(?s)mysqld: ready for connections.</log>
                                    <time>60000</time>
                                </wait>
                            </run>
                        </image>
                    </images>
                </configuration>

                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <!-- "build" should be used to create the images with the artifact -->
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
			<!-- jacoco code coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<configuration>
					<dataFile>target/jacoco.exec</dataFile>
					<outputDirectory>${jacoco.outputDirectory}</outputDirectory>
					<excludes>
						${test.exclusion.files}
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>jacoco-instrument</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>generate-report</id>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>check-coverage</id>
						<phase>verify</phase>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>${coverage.line.percent}</minimum>
										</limit>
										<limit>
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>${coverage.branch.percent}</minimum>
										</limit>
										<limit>
											<counter>CLASS</counter>
											<value>MISSEDCOUNT</value>
											<minimum>0</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- SonarQube -->
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${sonar-maven-plugin.version}</version>
			</plugin>
		</plugins>
	</build>

</project>
