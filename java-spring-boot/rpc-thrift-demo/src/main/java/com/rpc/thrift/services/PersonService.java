/**
 * Autogenerated by Thrift Compiler (0.13.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.rpc.thrift.services;

import org.apache.thrift.*;
import org.apache.thrift.annotation.Nullable;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.meta_data.StructMetaData;
import org.apache.thrift.protocol.*;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.transport.TMemoryInputTransport;
import org.apache.thrift.transport.TNonblockingTransport;
import org.apache.thrift.transport.TTransportException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-04-13")
public class PersonService {

    public interface Iface {

        Person getPersonByUsername(String username) throws DataException, TException;

        void savePerson(Person person) throws DataException, TException;

    }

    public interface AsyncIface {

        public void getPersonByUsername(String username, AsyncMethodCallback<Person> resultHandler) throws TException;

        public void savePerson(Person person, AsyncMethodCallback<Void> resultHandler) throws TException;

    }

    public static class Client extends TServiceClient implements Iface {
        public static class Factory implements TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(TProtocol iprot, TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(TProtocol prot) {
            super(prot, prot);
        }

        public Client(TProtocol iprot, TProtocol oprot) {
            super(iprot, oprot);
        }

        public Person getPersonByUsername(String username) throws DataException, TException {
            send_getPersonByUsername(username);
            return recv_getPersonByUsername();
        }

        public void send_getPersonByUsername(String username) throws TException {
            getPersonByUsername_args args = new getPersonByUsername_args();
            args.setUsername(username);
            sendBase("getPersonByUsername", args);
        }

        public Person recv_getPersonByUsername() throws DataException, TException {
            getPersonByUsername_result result = new getPersonByUsername_result();
            receiveBase(result, "getPersonByUsername");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.dateException != null) {
                throw result.dateException;
            }
            throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPersonByUsername failed: unknown result");
        }

        public void savePerson(Person person) throws DataException, TException {
            send_savePerson(person);
            recv_savePerson();
        }

        public void send_savePerson(Person person) throws TException {
            savePerson_args args = new savePerson_args();
            args.setPerson(person);
            sendBase("savePerson", args);
        }

        public void recv_savePerson() throws DataException, TException {
            savePerson_result result = new savePerson_result();
            receiveBase(result, "savePerson");
            if (result.dataException != null) {
                throw result.dataException;
            }
            return;
        }

    }

    public static class AsyncClient extends TAsyncClient implements AsyncIface {
        public static class Factory implements TAsyncClientFactory<AsyncClient> {
            private TAsyncClientManager clientManager;
            private TProtocolFactory protocolFactory;

            public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void getPersonByUsername(String username, AsyncMethodCallback<Person> resultHandler) throws TException {
            checkReady();
            getPersonByUsername_call method_call = new getPersonByUsername_call(username, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getPersonByUsername_call extends TAsyncMethodCall<Person> {
            private String username;

            public getPersonByUsername_call(String username, AsyncMethodCallback<Person> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.username = username;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("getPersonByUsername", TMessageType.CALL, 0));
                getPersonByUsername_args args = new getPersonByUsername_args();
                args.setUsername(username);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Person getResult() throws DataException, TException {
                if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getPersonByUsername();
            }
        }

        public void savePerson(Person person, AsyncMethodCallback<Void> resultHandler) throws TException {
            checkReady();
            savePerson_call method_call = new savePerson_call(person, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class savePerson_call extends TAsyncMethodCall<Void> {
            private Person person;

            public savePerson_call(Person person, AsyncMethodCallback<Void> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.person = person;
            }

            public void write_args(TProtocol prot) throws TException {
                prot.writeMessageBegin(new TMessage("savePerson", TMessageType.CALL, 0));
                savePerson_args args = new savePerson_args();
                args.setPerson(person);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public Void getResult() throws DataException, TException {
                if (getState() != TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
                TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return null;
            }
        }

    }

    public static class Processor<I extends Iface> extends TBaseProcessor<I> implements TProcessor {
        private static final Logger _LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, ProcessFunction<I, ? extends TBase>>()));
        }

        protected Processor(I iface, Map<String, ProcessFunction<I, ? extends TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, ProcessFunction<I, ? extends TBase>> getProcessMap(Map<String, ProcessFunction<I, ? extends TBase>> processMap) {
            processMap.put("getPersonByUsername", new getPersonByUsername());
            processMap.put("savePerson", new savePerson());
            return processMap;
        }

        public static class getPersonByUsername<I extends Iface> extends ProcessFunction<I, getPersonByUsername_args> {
            public getPersonByUsername() {
                super("getPersonByUsername");
            }

            public getPersonByUsername_args getEmptyArgsInstance() {
                return new getPersonByUsername_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public getPersonByUsername_result getResult(I iface, getPersonByUsername_args args) throws TException {
                getPersonByUsername_result result = new getPersonByUsername_result();
                try {
                    result.success = iface.getPersonByUsername(args.username);
                } catch (DataException dateException) {
                    result.dateException = dateException;
                }
                return result;
            }
        }

        public static class savePerson<I extends Iface> extends ProcessFunction<I, savePerson_args> {
            public savePerson() {
                super("savePerson");
            }

            public savePerson_args getEmptyArgsInstance() {
                return new savePerson_args();
            }

            protected boolean isOneway() {
                return false;
            }

            @Override
            protected boolean rethrowUnhandledExceptions() {
                return false;
            }

            public savePerson_result getResult(I iface, savePerson_args args) throws TException {
                savePerson_result result = new savePerson_result();
                try {
                    iface.savePerson(args.person);
                } catch (DataException dataException) {
                    result.dataException = dataException;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends TBaseAsyncProcessor<I> {
        private static final Logger _LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, AsyncProcessFunction<I, ? extends TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, AsyncProcessFunction<I, ? extends TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, AsyncProcessFunction<I, ? extends TBase, ?>> getProcessMap(Map<String, AsyncProcessFunction<I, ? extends TBase, ?>> processMap) {
            processMap.put("getPersonByUsername", new getPersonByUsername());
            processMap.put("savePerson", new savePerson());
            return processMap;
        }

        public static class getPersonByUsername<I extends AsyncIface> extends AsyncProcessFunction<I, getPersonByUsername_args, Person> {
            public getPersonByUsername() {
                super("getPersonByUsername");
            }

            public getPersonByUsername_args getEmptyArgsInstance() {
                return new getPersonByUsername_args();
            }

            public AsyncMethodCallback<Person> getResultHandler(final AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Person>() {
                    public void onComplete(Person o) {
                        getPersonByUsername_result result = new getPersonByUsername_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, TMessageType.REPLY, seqid);
                        } catch (TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = TMessageType.REPLY;
                        TSerializable msg;
                        getPersonByUsername_result result = new getPersonByUsername_result();
                        if (e instanceof DataException) {
                            result.dateException = (DataException) e;
                            result.setDateExceptionIsSet(true);
                            msg = result;
                        } else if (e instanceof TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = TMessageType.EXCEPTION;
                            msg = (TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = TMessageType.EXCEPTION;
                            msg = new TApplicationException(TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, getPersonByUsername_args args, AsyncMethodCallback<Person> resultHandler) throws TException {
                iface.getPersonByUsername(args.username, resultHandler);
            }
        }

        public static class savePerson<I extends AsyncIface> extends AsyncProcessFunction<I, savePerson_args, Void> {
            public savePerson() {
                super("savePerson");
            }

            public savePerson_args getEmptyArgsInstance() {
                return new savePerson_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
                final AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        savePerson_result result = new savePerson_result();
                        try {
                            fcall.sendResponse(fb, result, TMessageType.REPLY, seqid);
                        } catch (TTransportException e) {
                            _LOGGER.error("TTransportException writing to internal frame buffer", e);
                            fb.close();
                        } catch (java.lang.Exception e) {
                            _LOGGER.error("Exception writing to internal frame buffer", e);
                            onError(e);
                        }
                    }

                    public void onError(Exception e) {
                        byte msgType = TMessageType.REPLY;
                        TSerializable msg;
                        savePerson_result result = new savePerson_result();
                        if (e instanceof DataException) {
                            result.dataException = (DataException) e;
                            result.setDataExceptionIsSet(true);
                            msg = result;
                        } else if (e instanceof TTransportException) {
                            _LOGGER.error("TTransportException inside handler", e);
                            fb.close();
                            return;
                        } else if (e instanceof TApplicationException) {
                            _LOGGER.error("TApplicationException inside handler", e);
                            msgType = TMessageType.EXCEPTION;
                            msg = (TApplicationException) e;
                        } else {
                            _LOGGER.error("Exception inside handler", e);
                            msgType = TMessageType.EXCEPTION;
                            msg = new TApplicationException(TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                        } catch (Exception ex) {
                            _LOGGER.error("Exception writing to internal frame buffer", ex);
                            fb.close();
                        }
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, savePerson_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.savePerson(args.person, resultHandler);
            }
        }

    }

    public static class getPersonByUsername_args implements TBase<getPersonByUsername_args, getPersonByUsername_args._Fields>, Serializable, Cloneable, Comparable<getPersonByUsername_args> {
        private static final TStruct STRUCT_DESC = new TStruct("getPersonByUsername_args");

        private static final TField USERNAME_FIELD_DESC = new TField("username", TType.STRING, (short) 1);

        private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getPersonByUsername_argsStandardSchemeFactory();
        private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getPersonByUsername_argsTupleSchemeFactory();

        public @Nullable
        String username; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements TFieldIdEnum {
            USERNAME((short) 1, "username");

            private static final Map<String, _Fields> byName = new HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // USERNAME
                        return USERNAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @Nullable
            public static _Fields findByName(java.lang.String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, java.lang.String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.USERNAME, new FieldMetaData("username", TFieldRequirementType.REQUIRED, new FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "String")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getPersonByUsername_args.class, metaDataMap);
        }

        public getPersonByUsername_args() {
        }

        public getPersonByUsername_args(String username) {
            this();
            this.username = username;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPersonByUsername_args(getPersonByUsername_args other) {
            if (other.isSetUsername()) {
                this.username = other.username;
            }
        }

        public getPersonByUsername_args deepCopy() {
            return new getPersonByUsername_args(this);
        }

        @Override
        public void clear() {
            this.username = null;
        }

        @Nullable
        public String getUsername() {
            return this.username;
        }

        public getPersonByUsername_args setUsername(@Nullable String username) {
            this.username = username;
            return this;
        }

        public void unsetUsername() {
            this.username = null;
        }

        /** Returns true if field username is set (has been assigned a value) and false otherwise */
        public boolean isSetUsername() {
            return this.username != null;
        }

        public void setUsernameIsSet(boolean value) {
            if (!value) {
                this.username = null;
            }
        }

        public void setFieldValue(_Fields field, @Nullable Object value) {
            switch (field) {
                case USERNAME:
                    if (value == null) {
                        unsetUsername();
                    } else {
                        setUsername((String) value);
                    }
                    break;

            }
        }

        @Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case USERNAME:
                    return getUsername();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case USERNAME:
                    return isSetUsername();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof getPersonByUsername_args)
                return this.equals((getPersonByUsername_args) that);
            return false;
        }

        public boolean equals(getPersonByUsername_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_username = true && this.isSetUsername();
            boolean that_present_username = true && that.isSetUsername();
            if (this_present_username || that_present_username) {
                if (!(this_present_username && that_present_username))
                    return false;
                if (!this.username.equals(that.username))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
            if (isSetUsername())
                hashCode = hashCode * 8191 + username.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPersonByUsername_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUsername()) {
                lastComparison = TBaseHelper.compareTo(this.username, other.username);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(TProtocol oprot) throws TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPersonByUsername_args(");
            boolean first = true;

            sb.append("username:");
            if (this.username == null) {
                sb.append("null");
            } else {
                sb.append(this.username);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (username == null) {
                throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
        }

        private void writeObject(ObjectOutputStream out) throws IOException {
            try {
                write(new TCompactProtocol(new TIOStreamTransport(out)));
            } catch (TException te) {
                throw new IOException(te);
            }
        }

        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            try {
                read(new TCompactProtocol(new TIOStreamTransport(in)));
            } catch (TException te) {
                throw new IOException(te);
            }
        }

        private static class getPersonByUsername_argsStandardSchemeFactory implements SchemeFactory {
            public getPersonByUsername_argsStandardScheme getScheme() {
                return new getPersonByUsername_argsStandardScheme();
            }
        }

        private static class getPersonByUsername_argsStandardScheme extends StandardScheme<getPersonByUsername_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getPersonByUsername_args struct) throws TException {
                TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // USERNAME
                            if (schemeField.type == TType.STRING) {
                                struct.username = iprot.readString();
                                struct.setUsernameIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(TProtocol oprot, getPersonByUsername_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.username != null) {
                    oprot.writeFieldBegin(USERNAME_FIELD_DESC);
                    oprot.writeString(struct.username);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPersonByUsername_argsTupleSchemeFactory implements SchemeFactory {
            public getPersonByUsername_argsTupleScheme getScheme() {
                return new getPersonByUsername_argsTupleScheme();
            }
        }

        private static class getPersonByUsername_argsTupleScheme extends TupleScheme<getPersonByUsername_args> {

            @Override
            public void write(TProtocol prot, getPersonByUsername_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                oprot.writeString(struct.username);
            }

            @Override
            public void read(TProtocol prot, getPersonByUsername_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
            }
        }

        private static <S extends IScheme> S scheme(TProtocol proto) {
            return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class getPersonByUsername_result implements TBase<getPersonByUsername_result, getPersonByUsername_result._Fields>, Serializable, Cloneable, Comparable<getPersonByUsername_result> {
        private static final TStruct STRUCT_DESC = new TStruct("getPersonByUsername_result");

        private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short) 0);
        private static final TField DATE_EXCEPTION_FIELD_DESC = new TField("dateException", TType.STRUCT, (short) 1);

        private static final SchemeFactory STANDARD_SCHEME_FACTORY = new getPersonByUsername_resultStandardSchemeFactory();
        private static final SchemeFactory TUPLE_SCHEME_FACTORY = new getPersonByUsername_resultTupleSchemeFactory();

        public @Nullable
        Person success; // required
        public @Nullable
        DataException dateException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements TFieldIdEnum {
            SUCCESS((short) 0, "success"),
            DATE_EXCEPTION((short) 1, "dateException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // DATE_EXCEPTION
                        return DATE_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, Person.class)));
            tmpMap.put(_Fields.DATE_EXCEPTION, new FieldMetaData("dateException", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, DataException.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(getPersonByUsername_result.class, metaDataMap);
        }

        public getPersonByUsername_result() {
        }

        public getPersonByUsername_result(
                Person success,
                DataException dateException) {
            this();
            this.success = success;
            this.dateException = dateException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getPersonByUsername_result(getPersonByUsername_result other) {
            if (other.isSetSuccess()) {
                this.success = new Person(other.success);
            }
            if (other.isSetDateException()) {
                this.dateException = new DataException(other.dateException);
            }
        }

        public getPersonByUsername_result deepCopy() {
            return new getPersonByUsername_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.dateException = null;
        }

        @Nullable
        public Person getSuccess() {
            return this.success;
        }

        public getPersonByUsername_result setSuccess(@Nullable Person success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        @Nullable
        public DataException getDateException() {
            return this.dateException;
        }

        public getPersonByUsername_result setDateException(@Nullable DataException dateException) {
            this.dateException = dateException;
            return this;
        }

        public void unsetDateException() {
            this.dateException = null;
        }

        /** Returns true if field dateException is set (has been assigned a value) and false otherwise */
        public boolean isSetDateException() {
            return this.dateException != null;
        }

        public void setDateExceptionIsSet(boolean value) {
            if (!value) {
                this.dateException = null;
            }
        }

        public void setFieldValue(_Fields field, @Nullable Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Person) value);
                    }
                    break;

                case DATE_EXCEPTION:
                    if (value == null) {
                        unsetDateException();
                    } else {
                        setDateException((DataException) value);
                    }
                    break;

            }
        }

        @Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

                case DATE_EXCEPTION:
                    return getDateException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                case DATE_EXCEPTION:
                    return isSetDateException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof getPersonByUsername_result)
                return this.equals((getPersonByUsername_result) that);
            return false;
        }

        public boolean equals(getPersonByUsername_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_dateException = true && this.isSetDateException();
            boolean that_present_dateException = true && that.isSetDateException();
            if (this_present_dateException || that_present_dateException) {
                if (!(this_present_dateException && that_present_dateException))
                    return false;
                if (!this.dateException.equals(that.dateException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
            if (isSetSuccess())
                hashCode = hashCode * 8191 + success.hashCode();

            hashCode = hashCode * 8191 + ((isSetDateException()) ? 131071 : 524287);
            if (isSetDateException())
                hashCode = hashCode * 8191 + dateException.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(getPersonByUsername_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDateException()).compareTo(other.isSetDateException());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDateException()) {
                lastComparison = TBaseHelper.compareTo(this.dateException, other.dateException);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(TProtocol oprot) throws TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("getPersonByUsername_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("dateException:");
            if (this.dateException == null) {
                sb.append("null");
            } else {
                sb.append(this.dateException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(ObjectOutputStream out) throws IOException {
            try {
                write(new TCompactProtocol(new TIOStreamTransport(out)));
            } catch (TException te) {
                throw new IOException(te);
            }
        }

        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            try {
                read(new TCompactProtocol(new TIOStreamTransport(in)));
            } catch (TException te) {
                throw new IOException(te);
            }
        }

        private static class getPersonByUsername_resultStandardSchemeFactory implements SchemeFactory {
            public getPersonByUsername_resultStandardScheme getScheme() {
                return new getPersonByUsername_resultStandardScheme();
            }
        }

        private static class getPersonByUsername_resultStandardScheme extends StandardScheme<getPersonByUsername_result> {

            public void read(TProtocol iprot, getPersonByUsername_result struct) throws TException {
                TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == TType.STRUCT) {
                                struct.success = new Person();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 1: // DATE_EXCEPTION
                            if (schemeField.type == TType.STRUCT) {
                                struct.dateException = new DataException();
                                struct.dateException.read(iprot);
                                struct.setDateExceptionIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(TProtocol oprot, getPersonByUsername_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.dateException != null) {
                    oprot.writeFieldBegin(DATE_EXCEPTION_FIELD_DESC);
                    struct.dateException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getPersonByUsername_resultTupleSchemeFactory implements SchemeFactory {
            public getPersonByUsername_resultTupleScheme getScheme() {
                return new getPersonByUsername_resultTupleScheme();
            }
        }

        private static class getPersonByUsername_resultTupleScheme extends TupleScheme<getPersonByUsername_result> {

            @Override
            public void write(TProtocol prot, getPersonByUsername_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetDateException()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
                if (struct.isSetDateException()) {
                    struct.dateException.write(oprot);
                }
            }

            @Override
            public void read(TProtocol prot, getPersonByUsername_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = new Person();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.dateException = new DataException();
                    struct.dateException.read(iprot);
                    struct.setDateExceptionIsSet(true);
                }
            }
        }

        private static <S extends IScheme> S scheme(TProtocol proto) {
            return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class savePerson_args implements TBase<savePerson_args, savePerson_args._Fields>, Serializable, Cloneable, Comparable<savePerson_args> {
        private static final TStruct STRUCT_DESC = new TStruct("savePerson_args");

        private static final TField PERSON_FIELD_DESC = new TField("person", TType.STRUCT, (short) 1);

        private static final SchemeFactory STANDARD_SCHEME_FACTORY = new savePerson_argsStandardSchemeFactory();
        private static final SchemeFactory TUPLE_SCHEME_FACTORY = new savePerson_argsTupleSchemeFactory();

        public @Nullable
        Person person; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements TFieldIdEnum {
            PERSON((short) 1, "person");

            private static final Map<String, _Fields> byName = new HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // PERSON
                        return PERSON;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.PERSON, new FieldMetaData("person", TFieldRequirementType.REQUIRED, new StructMetaData(TType.STRUCT, Person.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(savePerson_args.class, metaDataMap);
        }

        public savePerson_args() {
        }

        public savePerson_args(
                Person person) {
            this();
            this.person = person;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public savePerson_args(savePerson_args other) {
            if (other.isSetPerson()) {
                this.person = new Person(other.person);
            }
        }

        public savePerson_args deepCopy() {
            return new savePerson_args(this);
        }

        @Override
        public void clear() {
            this.person = null;
        }

        @Nullable
        public Person getPerson() {
            return this.person;
        }

        public savePerson_args setPerson(@Nullable Person person) {
            this.person = person;
            return this;
        }

        public void unsetPerson() {
            this.person = null;
        }

        /** Returns true if field person is set (has been assigned a value) and false otherwise */
        public boolean isSetPerson() {
            return this.person != null;
        }

        public void setPersonIsSet(boolean value) {
            if (!value) {
                this.person = null;
            }
        }

        public void setFieldValue(_Fields field, @Nullable Object value) {
            switch (field) {
                case PERSON:
                    if (value == null) {
                        unsetPerson();
                    } else {
                        setPerson((Person) value);
                    }
                    break;

            }
        }

        @Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case PERSON:
                    return getPerson();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case PERSON:
                    return isSetPerson();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof savePerson_args)
                return this.equals((savePerson_args) that);
            return false;
        }

        public boolean equals(savePerson_args that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_person = true && this.isSetPerson();
            boolean that_present_person = true && that.isSetPerson();
            if (this_present_person || that_present_person) {
                if (!(this_present_person && that_present_person))
                    return false;
                if (!this.person.equals(that.person))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetPerson()) ? 131071 : 524287);
            if (isSetPerson())
                hashCode = hashCode * 8191 + person.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(savePerson_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPerson()).compareTo(other.isSetPerson());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPerson()) {
                lastComparison = TBaseHelper.compareTo(this.person, other.person);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(TProtocol oprot) throws TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("savePerson_args(");
            boolean first = true;

            sb.append("person:");
            if (this.person == null) {
                sb.append("null");
            } else {
                sb.append(this.person);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            if (person == null) {
                throw new TProtocolException("Required field 'person' was not present! Struct: " + toString());
            }
            // check for sub-struct validity
            if (person != null) {
                person.validate();
            }
        }

        private void writeObject(ObjectOutputStream out) throws IOException {
            try {
                write(new TCompactProtocol(new TIOStreamTransport(out)));
            } catch (TException te) {
                throw new IOException(te);
            }
        }

        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            try {
                read(new TCompactProtocol(new TIOStreamTransport(in)));
            } catch (TException te) {
                throw new IOException(te);
            }
        }

        private static class savePerson_argsStandardSchemeFactory implements SchemeFactory {
            public savePerson_argsStandardScheme getScheme() {
                return new savePerson_argsStandardScheme();
            }
        }

        private static class savePerson_argsStandardScheme extends StandardScheme<savePerson_args> {

            public void read(TProtocol iprot, savePerson_args struct) throws TException {
                TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // PERSON
                            if (schemeField.type == TType.STRUCT) {
                                struct.person = new Person();
                                struct.person.read(iprot);
                                struct.setPersonIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(TProtocol oprot, savePerson_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.person != null) {
                    oprot.writeFieldBegin(PERSON_FIELD_DESC);
                    struct.person.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class savePerson_argsTupleSchemeFactory implements SchemeFactory {
            public savePerson_argsTupleScheme getScheme() {
                return new savePerson_argsTupleScheme();
            }
        }

        private static class savePerson_argsTupleScheme extends TupleScheme<savePerson_args> {

            @Override
            public void write(TProtocol prot, savePerson_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                struct.person.write(oprot);
            }

            @Override
            public void read(TProtocol prot, savePerson_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                struct.person = new Person();
                struct.person.read(iprot);
                struct.setPersonIsSet(true);
            }
        }

        private static <S extends IScheme> S scheme(TProtocol proto) {
            return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

    public static class savePerson_result implements TBase<savePerson_result, savePerson_result._Fields>, Serializable, Cloneable, Comparable<savePerson_result> {
        private static final TStruct STRUCT_DESC = new TStruct("savePerson_result");

        private static final TField DATA_EXCEPTION_FIELD_DESC = new TField("dataException", TType.STRUCT, (short) 1);

        private static final SchemeFactory STANDARD_SCHEME_FACTORY = new savePerson_resultStandardSchemeFactory();
        private static final SchemeFactory TUPLE_SCHEME_FACTORY = new savePerson_resultTupleSchemeFactory();

        public @Nullable DataException dataException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements TFieldIdEnum {
            DATA_EXCEPTION((short) 1, "dataException");

            private static final Map<String, _Fields> byName = new HashMap<java.lang.String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            @Nullable
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // DATA_EXCEPTION
                        return DATA_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            @Nullable
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, FieldMetaData> metaDataMap;

        static {
            Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DATA_EXCEPTION, new FieldMetaData("dataException", TFieldRequirementType.DEFAULT, new StructMetaData(TType.STRUCT, DataException.class)));
            metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
            FieldMetaData.addStructMetaDataMap(savePerson_result.class, metaDataMap);
        }

        public savePerson_result() {
        }

        public savePerson_result(DataException dataException) {
            this();
            this.dataException = dataException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public savePerson_result(savePerson_result other) {
            if (other.isSetDataException()) {
                this.dataException = new DataException(other.dataException);
            }
        }

        public savePerson_result deepCopy() {
            return new savePerson_result(this);
        }

        @Override
        public void clear() {
            this.dataException = null;
        }

        @Nullable
        public DataException getDataException() {
            return this.dataException;
        }

        public savePerson_result setDataException(@Nullable DataException dataException) {
            this.dataException = dataException;
            return this;
        }

        public void unsetDataException() {
            this.dataException = null;
        }

        /** Returns true if field dataException is set (has been assigned a value) and false otherwise */
        public boolean isSetDataException() {
            return this.dataException != null;
        }

        public void setDataExceptionIsSet(boolean value) {
            if (!value) {
                this.dataException = null;
            }
        }

        public void setFieldValue(_Fields field, @Nullable Object value) {
            switch (field) {
                case DATA_EXCEPTION:
                    if (value == null) {
                        unsetDataException();
                    } else {
                        setDataException((DataException) value);
                    }
                    break;

            }
        }

        @Nullable
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case DATA_EXCEPTION:
                    return getDataException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case DATA_EXCEPTION:
                    return isSetDataException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(java.lang.Object that) {
            if (that == null)
                return false;
            if (that instanceof savePerson_result)
                return this.equals((savePerson_result) that);
            return false;
        }

        public boolean equals(savePerson_result that) {
            if (that == null)
                return false;
            if (this == that)
                return true;

            boolean this_present_dataException = true && this.isSetDataException();
            boolean that_present_dataException = true && that.isSetDataException();
            if (this_present_dataException || that_present_dataException) {
                if (!(this_present_dataException && that_present_dataException))
                    return false;
                if (!this.dataException.equals(that.dataException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            int hashCode = 1;

            hashCode = hashCode * 8191 + ((isSetDataException()) ? 131071 : 524287);
            if (isSetDataException())
                hashCode = hashCode * 8191 + dataException.hashCode();

            return hashCode;
        }

        @Override
        public int compareTo(savePerson_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDataException()).compareTo(other.isSetDataException());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDataException()) {
                lastComparison = TBaseHelper.compareTo(this.dataException, other.dataException);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Nullable
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(TProtocol iprot) throws TException {
            scheme(iprot).read(iprot, this);
        }

        public void write(TProtocol oprot) throws TException {
            scheme(oprot).write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("savePerson_result(");
            boolean first = true;

            sb.append("dataException:");
            if (this.dataException == null) {
                sb.append("null");
            } else {
                sb.append(this.dataException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(ObjectOutputStream out) throws IOException {
            try {
                write(new TCompactProtocol(new TIOStreamTransport(out)));
            } catch (TException te) {
                throw new IOException(te);
            }
        }

        private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
            try {
                read(new TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new IOException(te);
            }
        }

        private static class savePerson_resultStandardSchemeFactory implements SchemeFactory {
            public savePerson_resultStandardScheme getScheme() {
                return new savePerson_resultStandardScheme();
            }
        }

        private static class savePerson_resultStandardScheme extends StandardScheme<savePerson_result> {

            public void read(TProtocol iprot, savePerson_result struct) throws TException {
                TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // DATA_EXCEPTION
                            if (schemeField.type == TType.STRUCT) {
                                struct.dataException = new DataException();
                                struct.dataException.read(iprot);
                                struct.setDataExceptionIsSet(true);
                            } else {
                                TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(TProtocol oprot, savePerson_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.dataException != null) {
                    oprot.writeFieldBegin(DATA_EXCEPTION_FIELD_DESC);
                    struct.dataException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class savePerson_resultTupleSchemeFactory implements SchemeFactory {
            public savePerson_resultTupleScheme getScheme() {
                return new savePerson_resultTupleScheme();
            }
        }

        private static class savePerson_resultTupleScheme extends TupleScheme<savePerson_result> {

            @Override
            public void write(TProtocol prot, savePerson_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDataException()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDataException()) {
                    struct.dataException.write(oprot);
                }
            }

            @Override
            public void read(TProtocol prot, savePerson_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.dataException = new DataException();
                    struct.dataException.read(iprot);
                    struct.setDataExceptionIsSet(true);
                }
            }
        }

        private static <S extends IScheme> S scheme(TProtocol proto) {
            return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
        }
    }

}
