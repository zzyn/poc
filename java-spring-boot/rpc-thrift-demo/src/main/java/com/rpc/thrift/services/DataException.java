/**
 * Autogenerated by Thrift Compiler (0.13.0)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package com.rpc.thrift.services;

import org.apache.thrift.*;
import org.apache.thrift.annotation.Nullable;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.*;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.transport.TIOStreamTransport;

import javax.annotation.Generated;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-04-13")
public class DataException extends TException implements TBase<DataException, DataException._Fields>, Serializable, Cloneable, Comparable<DataException> {
    private static final TStruct STRUCT_DESC = new TStruct("DataException");

    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short) 1);
    private static final TField CALL_STACK_FIELD_DESC = new TField("callStack", TType.STRING, (short) 2);
    private static final TField DATE_FIELD_DESC = new TField("date", TType.STRING, (short) 3);

    private static final SchemeFactory STANDARD_SCHEME_FACTORY = new DataExceptionStandardSchemeFactory();
    private static final SchemeFactory TUPLE_SCHEME_FACTORY = new DataExceptionTupleSchemeFactory();

    public @Nullable
    String message; // optional
    public @Nullable
    String callStack; // optional
    public @Nullable
    String date; // optional

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements TFieldIdEnum {
        MESSAGE((short) 1, "message"),
        CALL_STACK((short) 2, "callStack"),
        DATE((short) 3, "date");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @Nullable
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // MESSAGE
                    return MESSAGE;
                case 2: // CALL_STACK
                    return CALL_STACK;
                case 3: // DATE
                    return DATE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @Nullable
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {_Fields.MESSAGE, _Fields.CALL_STACK, _Fields.DATE};
    public static final Map<_Fields, FieldMetaData> metaDataMap;

    static {
        Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.MESSAGE, new FieldMetaData("message", TFieldRequirementType.OPTIONAL, new FieldValueMetaData(TType.STRING, "String")));
        tmpMap.put(_Fields.CALL_STACK, new FieldMetaData("callStack", TFieldRequirementType.OPTIONAL, new FieldValueMetaData(TType.STRING, "String")));
        tmpMap.put(_Fields.DATE, new FieldMetaData("date", TFieldRequirementType.OPTIONAL, new FieldValueMetaData(TType.STRING, "String")));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        FieldMetaData.addStructMetaDataMap(DataException.class, metaDataMap);
    }

    public DataException() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DataException(DataException other) {
        if (other.isSetMessage()) {
            this.message = other.message;
        }
        if (other.isSetCallStack()) {
            this.callStack = other.callStack;
        }
        if (other.isSetDate()) {
            this.date = other.date;
        }
    }

    public DataException deepCopy() {
        return new DataException(this);
    }

    @Override
    public void clear() {
        this.message = null;
        this.callStack = null;
        this.date = null;
    }

    @Nullable
    public String getMessage() {
        return this.message;
    }

    public DataException setMessage(@Nullable String message) {
        this.message = message;
        return this;
    }

    public void unsetMessage() {
        this.message = null;
    }

    /**
     * Returns true if field message is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMessage() {
        return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
        if (!value) {
            this.message = null;
        }
    }

    @Nullable
    public String getCallStack() {
        return this.callStack;
    }

    public DataException setCallStack(@Nullable String callStack) {
        this.callStack = callStack;
        return this;
    }

    public void unsetCallStack() {
        this.callStack = null;
    }

    /**
     * Returns true if field callStack is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCallStack() {
        return this.callStack != null;
    }

    public void setCallStackIsSet(boolean value) {
        if (!value) {
            this.callStack = null;
        }
    }

    @Nullable
    public String getDate() {
        return this.date;
    }

    public DataException setDate(@Nullable String date) {
        this.date = date;
        return this;
    }

    public void unsetDate() {
        this.date = null;
    }

    /**
     * Returns true if field date is set (has been assigned a value) and false otherwise
     */
    public boolean isSetDate() {
        return this.date != null;
    }

    public void setDateIsSet(boolean value) {
        if (!value) {
            this.date = null;
        }
    }

    public void setFieldValue(_Fields field, @Nullable Object value) {
        switch (field) {
            case MESSAGE:
                if (value == null) {
                    unsetMessage();
                } else {
                    setMessage((String) value);
                }
                break;

            case CALL_STACK:
                if (value == null) {
                    unsetCallStack();
                } else {
                    setCallStack((String) value);
                }
                break;

            case DATE:
                if (value == null) {
                    unsetDate();
                } else {
                    setDate((String) value);
                }
                break;

        }
    }

    @Nullable
    public Object getFieldValue(_Fields field) {
        switch (field) {
            case MESSAGE:
                return getMessage();

            case CALL_STACK:
                return getCallStack();

            case DATE:
                return getDate();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case MESSAGE:
                return isSetMessage();
            case CALL_STACK:
                return isSetCallStack();
            case DATE:
                return isSetDate();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof DataException)
            return this.equals((DataException) that);
        return false;
    }

    public boolean equals(DataException that) {
        if (that == null)
            return false;
        if (this == that)
            return true;

        boolean this_present_message = true && this.isSetMessage();
        boolean that_present_message = true && that.isSetMessage();
        if (this_present_message || that_present_message) {
            if (!(this_present_message && that_present_message))
                return false;
            if (!this.message.equals(that.message))
                return false;
        }

        boolean this_present_callStack = true && this.isSetCallStack();
        boolean that_present_callStack = true && that.isSetCallStack();
        if (this_present_callStack || that_present_callStack) {
            if (!(this_present_callStack && that_present_callStack))
                return false;
            if (!this.callStack.equals(that.callStack))
                return false;
        }

        boolean this_present_date = true && this.isSetDate();
        boolean that_present_date = true && that.isSetDate();
        if (this_present_date || that_present_date) {
            if (!(this_present_date && that_present_date))
                return false;
            if (!this.date.equals(that.date))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        int hashCode = 1;

        hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
        if (isSetMessage())
            hashCode = hashCode * 8191 + message.hashCode();

        hashCode = hashCode * 8191 + ((isSetCallStack()) ? 131071 : 524287);
        if (isSetCallStack())
            hashCode = hashCode * 8191 + callStack.hashCode();

        hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
        if (isSetDate())
            hashCode = hashCode * 8191 + date.hashCode();

        return hashCode;
    }

    @Override
    public int compareTo(DataException other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMessage()) {
            lastComparison = TBaseHelper.compareTo(this.message, other.message);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCallStack()).compareTo(other.isSetCallStack());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCallStack()) {
            lastComparison = TBaseHelper.compareTo(this.callStack, other.callStack);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDate()) {
            lastComparison = TBaseHelper.compareTo(this.date, other.date);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @Nullable
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
        scheme(iprot).read(iprot, this);
    }

    public void write(TProtocol oprot) throws TException {
        scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DataException(");
        boolean first = true;

        if (isSetMessage()) {
            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            } else {
                sb.append(this.message);
            }
            first = false;
        }
        if (isSetCallStack()) {
            if (!first) sb.append(", ");
            sb.append("callStack:");
            if (this.callStack == null) {
                sb.append("null");
            } else {
                sb.append(this.callStack);
            }
            first = false;
        }
        if (isSetDate()) {
            if (!first) sb.append(", ");
            sb.append("date:");
            if (this.date == null) {
                sb.append("null");
            } else {
                sb.append(this.date);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        try {
            write(new TCompactProtocol(new TIOStreamTransport(out)));
        } catch (TException te) {
            throw new IOException(te);
        }
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        try {
            read(new TCompactProtocol(new TIOStreamTransport(in)));
        } catch (TException te) {
            throw new IOException(te);
        }
    }

    private static class DataExceptionStandardSchemeFactory implements SchemeFactory {
        public DataExceptionStandardScheme getScheme() {
            return new DataExceptionStandardScheme();
        }
    }

    private static class DataExceptionStandardScheme extends StandardScheme<DataException> {

        public void read(TProtocol iprot, DataException struct) throws TException {
            TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // MESSAGE
                        if (schemeField.type == TType.STRING) {
                            struct.message = iprot.readString();
                            struct.setMessageIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // CALL_STACK
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.callStack = iprot.readString();
                            struct.setCallStackIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // DATE
                        if (schemeField.type == TType.STRING) {
                            struct.date = iprot.readString();
                            struct.setDateIsSet(true);
                        } else {
                            TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(TProtocol oprot, DataException struct) throws TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.message != null) {
                if (struct.isSetMessage()) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    oprot.writeString(struct.message);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.callStack != null) {
                if (struct.isSetCallStack()) {
                    oprot.writeFieldBegin(CALL_STACK_FIELD_DESC);
                    oprot.writeString(struct.callStack);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.date != null) {
                if (struct.isSetDate()) {
                    oprot.writeFieldBegin(DATE_FIELD_DESC);
                    oprot.writeString(struct.date);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class DataExceptionTupleSchemeFactory implements SchemeFactory {
        public DataExceptionTupleScheme getScheme() {
            return new DataExceptionTupleScheme();
        }
    }

    private static class DataExceptionTupleScheme extends TupleScheme<DataException> {

        @Override
        public void write(TProtocol prot, DataException struct) throws TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetMessage()) {
                optionals.set(0);
            }
            if (struct.isSetCallStack()) {
                optionals.set(1);
            }
            if (struct.isSetDate()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetMessage()) {
                oprot.writeString(struct.message);
            }
            if (struct.isSetCallStack()) {
                oprot.writeString(struct.callStack);
            }
            if (struct.isSetDate()) {
                oprot.writeString(struct.date);
            }
        }

        @Override
        public void read(TProtocol prot, DataException struct) throws TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
            }
            if (incoming.get(1)) {
                struct.callStack = iprot.readString();
                struct.setCallStackIsSet(true);
            }
            if (incoming.get(2)) {
                struct.date = iprot.readString();
                struct.setDateIsSet(true);
            }
        }
    }

    private static <S extends IScheme> S scheme(TProtocol proto) {
        return (StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
}

